// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  USER
}

model User {
    id            String    @id @default(cuid())
    name          String?
    password      String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          UserRole @default(USER)
    isTwoFactorEnabled Boolean @default(false)
    twoFactorConfirmation  TwoFactorConfirmation?

    accounts      Account[]
    sessions      Session[]

    
    createdAt DateTime @default(now())
    UpdatedAt DateTime @updatedAt

    posts         Post[]

    //spotify data
    song Songs[]
    favorites Songs[] @relation("LikedSongs")
    playlist Playlist[]
    //spotify customer
    subscription Subscriptions[]
    customer Customers[]
    full_name String?
    billing_address Json?
    payment_method Json?

    // AI
    apiLimit  UserApiLimit?
    userSubscription UserSubscription?
}

model VerificationToken {
    identifier String   @id @default(uuid())
    email      String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model PasswordResetToken {
  id String @id @default(uuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email,token])
}

model TwoFactorToken {
  id String @id @default(uuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email,token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId ])
}

model Songs {
  id String @id @default(cuid()) 

  userId String
  user User @relation(references: [id], fields: [userId])

  title String
  artist  String
  genre String?
  released_date String?

  song_path String
  image_path String

  createdAt DateTime @default(now())
  UpdatedAt DateTime @updatedAt

  usersLikes User[] @relation("LikedSongs")
  playlistSongs PlaylistSongs[]
}


// model LikedSongs {
//     // id String @id @default(uuid())
//     createdAt DateTime @default(now())
//     UpdatedAt DateTime @updatedAt
    
//     // created by
//     userId String 
//     user User @relation(references: [id], fields: [userId])


//     songsId String
//     songs Songs @relation(fields: [songsId],references: [id])

//     @@id([userId,songsId])
// }


model Playlist {
    id String @id @default(uuid())
    name String

    createdAt DateTime @default(now())
    UpdatedAt DateTime @updatedAt
    
    // created by
    userId String
    user User @relation(references: [id], fields: [userId])

    //songs
    playlistSongs PlaylistSongs?

}

model PlaylistSongs {
    id String @id @default(uuid())
    playlistId String @unique
    playlist Playlist @relation(references: [id],fields: [playlistId])

    songsId String
    songs Songs @relation(references: [id],fields: [songsId])
}

model Customers {
  id String @id @default(cuid())
  stripe_customer_id String
  userId String?
  user User? @relation(references: [id],fields: [userId])
}

enum Pricing_type {
  ONE_TIME @map("one_time")
  RECURRING @map("recurring")
  
}
enum Pricing_plan_interval  {
  DAY @map("day")
  WEEK @map("week")
  MONTH @map("month")
  YEAR @map("year")
  
}

model Prices {
  // -- Price ID from Stripe, e.g. price_1234.
  id String @id
  // -- The ID of the prduct that this price belongs to.
  // product_id text references products
  product_id String?
  product Products? @relation(references: [id],fields: [product_id])
  // -- Whether the price can be used for new purchases.
  active Boolean?
  // -- A brief description of the price.
  description String?
  // -- The unit amount as a positive integer in the smallest currency unit (e.g., 100 cents for US$1.00 or 100 for Â¥100, a zero-decimal currency).
  unit_amount Int?
  // -- Three-letter ISO currency code, in lowercase.
  currency String ?
  // -- One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase.
  type Pricing_type?
  // -- The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.
  interval Pricing_plan_interval?
  // -- The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months.
  interval_count Int?
  // -- Default number of trial days when subscribing a customer to this price using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan).
  trial_period_days Int?
  // -- Set of key-value pairs, used to store additional information about the object in a structured format.
  metadata Json?
  subscriptions Subscriptions[]
}
model Products {
  // Product ID from Stripe, e.g. prod_1234.
  id String @id 
  // -- Whether the product is currently available for purchase.
  active Boolean?
  // -- The product's name, meant to be displayable to the customer. Whenever this product is sold via a subscription, name will show up on associated invoice line item descriptions.
  name String?
  // -- The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.
  description String?
  // --
  prices Prices[]
  // -- A URL of the product image in Stripe, meant to be displayable to the customer.
  image String?
  // -- Set of key-value pairs, used to store additional information about the object in a structured format.
  metadata  Json?
}
enum Subscription_status {
  TRIALING @map("trialing")
  ACTIVE @map("active")
  CANCELED  @map("canceled")
  INCOMPLETE  @map("incomplete")
  INCOMPLETE_EXPIRED @map("incomplete_expired")
  PAST_DUE @map("past_due")
  UNPAID @map("unpaid")

}
model Subscriptions {
  // -- Subscription ID from Stripe, e.g. sub_1234.
  id String @id 

  // user_id uuid references auth.users not null,
  // -- The status of the subscription object, one of subscription_status type above.
  status Subscription_status?
  // -- Set of key-value pairs, used to store additional information about the object in a structured format.
  metadata Json?
  // -- ID of the price that created this subscription.
  price_id String?
  price Prices? @relation(fields: [price_id], references: [id])
  // -- Quantity multiplied by the unit amount of the price creates the amount of the subscription. Can be used to charge multiple seats.
  quantity Int?
  // -- If true the subscription has been canceled by the user and will be deleted at the end of the billing period.
  cancel_at_period_end Boolean?
  // -- Time at which the subscription was created.
  created DateTime @default(now()) 
  // -- Start of the current period that the subscription has been invoiced for.
  current_period_start DateTime @default(now()) 
  // -- End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.
  current_period_end DateTime @default(now()) 
  // -- If the subscription has ended, the timestamp of the date the subscription ended.
  ended_at DateTime? @default(now()) 
  // -- A date in the future at which the subscription will automatically get canceled.
  cancel_at DateTime? @default(now()) 
  // -- If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with `cancel_at_period_end`, `canceled_at` will still reflect the date of the initial cancellation request, not the end of the subscription period when the subscription is automatically moved to a canceled state.
  canceled_at DateTime? @default(now()) 
  // -- If the subscription has a trial, the beginning of that trial.
  trial_start DateTime? @default(now()) 
  // -- If the subscription has a trial, the end of that trial.
  trial_end DateTime? @default(now()) 

  userId String 
  user User @relation(references: [id],fields: [userId])
}

// gpt saas
model UserApiLimit {
  id String @id @default(cuid())
  userId String @unique
  user User @relation(fields: [userId],references: [id])
  count Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserSubscription {
  id String @id @default(cuid())
  userId String @unique
  user User @relation(fields: [userId],references: [id])
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end") 
}

// Fitness
// Fitness
// Fitness
enum CircuitType {
  STRAIGHT
  SUPER
  DROP
  COMPOUND
  PYRAMID
  RESTPAUSE
  TIMEUNDER
  TRIGIANT
}

model Routine {
  id      String    @id @default(cuid())
  created DateTime  @default(now())
  title   String
  circuit Circuit[]
  routineEvent RoutineEvent[]
}

model RoutineEvent {
  id  String @id @default(cuid())
  date DateTime @default(now())
  completed Boolean
  routineId String
  routine Routine @relation(fields: [routineId], references: [id])
}

model Circuit {
  id        String      @id @default(cuid())
  created   DateTime    @default(now())
  type      CircuitType
  setGroup  SetGroup[]
  routineId String
  routine   Routine     @relation(fields: [routineId], references: [id])
}

model SetGroup {
  id         String       @id @default(cuid())

  exerciseId String
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  setDetails Set[]
  circuitId  String
  circuit    Circuit      @relation(fields: [circuitId], references: [id])
}

model Set {
  id         String   @id @default(cuid())
  date       DateTime @default(now())
  completed  DateTime?
  weight     Int
  reps       Int
  setGroupId      String
  setGroup        SetGroup      @relation(fields: [setGroupId], references: [id])
}

model Exercise {
  id          String       @id @default(cuid())
  name        String
  description String?
  // muscles     String[]
  imageUrl    String?
  setDetails  SetGroup[]

  @@unique([id, name])
}